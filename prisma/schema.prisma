generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  HR_ADMIN
  TRAINER
  LEARNER
}

enum TeamRole {
  LEADER
  MEMBER
}

enum PointsType {
  COMPLETION
  STREAK
  BONUS
  QUEST
  MANUAL
}

enum BadgeType {
  COMPLETION
  STREAK
  ENGAGEMENT
  CUSTOM
}

enum LeaderboardScope {
  COMPANY
  TEAM
  GLOBAL
}

enum LeaderboardPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  ALL_TIME
}

enum QuestStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum QuestMissionType {
  COURSE
  CHAPTER
  CUSTOM
}

enum QuestAssigneeType {
  USER
  TEAM
}

enum BlockType {
  VIDEO_LESSON
  RESOURCES
  LIVE_SESSION
  QUIZ
  GAMIFICATION
}

enum QuizQuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

enum CourseEnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum CourseEnrollmentSource {
  MANUAL
  TEAM
  QUEST
  SELF_ENROLL
}

enum AchievementUnlockType {
  FIRST_CHAPTER
  MODULE_COMPLETION
  COURSE_COMPLETION
}

enum AttachmentScope {
  COURSE
  LESSON
}

enum GamificationContentType {
  QUIZ
  FLASHCARDS
}

enum GamificationStatus {
  DRAFT
  GENERATING
  READY
  FAILED
}

model Company {
  id          String   @id @default(cuid())
  clerkOrgId  String   @unique
  name        String
  slug        String   @unique
  domain      String?
  description String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profiles     UserProfile[]
  teams        CompanyTeam[]
  courses      Course[]
  categories   Category[]
  badges       Badge[]
  quests       Quest[]
  leaderboards Leaderboard[]
  liveSessions LiveSession[]
  quizzes      Quiz[]
  flashcardDecks FlashcardDeck[]
}

model UserProfile {
  id           String    @id @default(cuid())
  userId       String    @unique
  companyId    String
  role         UserRole
  jobTitle     String?
  department   String?
  avatarUrl    String?
  bio          String?
  timezone     String?
  points       Int       @default(0)
  streakCount  Int       @default(0)
  lastActiveAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  company                 Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  memberships             TeamMembership[]
  teamsCreated            CompanyTeam[]          @relation("TeamCreatedBy")
  createdCourses          Course[]               @relation("CourseCreatedBy")
  enrollments             CourseEnrollment[]
  enrollmentsAssigned     CourseEnrollment[]     @relation("CourseEnrollmentAssignedBy")
  teamAssignmentsAssigned CourseTeamAssignment[] @relation("CourseTeamAssignmentAssignedBy")
  progress                UserProgress[]
  badges                  UserBadge[]
  badgesAwarded           UserBadge[]            @relation("UserBadgeAwardedBy")
  pointsLog               UserPoints[]
  questsCreated           Quest[]                @relation("QuestCreatedBy")
  questAssignments        QuestAssignment[]      @relation("QuestAssignmentAssignedBy")
  questParticipations     QuestAssignment[]      @relation("QuestAssignmentUser")
  liveSessionsHosted      LiveSession[]          @relation("LiveSessionHost")
  leaderboardEntries      LeaderboardEntry[]     @relation("LeaderboardEntryUser")
  lessonProgress          UserLessonProgress[]
  achievementsUnlocked    UserCourseAchievement[]
  achievementsCreated     CourseAchievement[]     @relation("CourseAchievementCreatedBy")
  quizzesCreated          Quiz[]                  @relation("QuizCreatedBy")
  quizAttempts            QuizAttempt[]           @relation("QuizAttemptUser")
  gamificationRequests    GamificationBlock[]
  flashcardDecksCreated   FlashcardDeck[]
}

model CompanyTeam {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  description String?
  createdById String
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company            Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy          UserProfile            @relation("TeamCreatedBy", fields: [createdById], references: [id])
  memberships        TeamMembership[]
  courseAssignments  CourseTeamAssignment[]
  leaderboardEntries LeaderboardEntry[]     @relation("LeaderboardEntryTeam")
  questAssignments   QuestAssignment[]      @relation("QuestAssignmentTeam")
}

model TeamMembership {
  id            String   @id @default(cuid())
  teamId        String
  userProfileId String
  role          TeamRole @default(MEMBER)
  joinedAt      DateTime @default(now())

  team        CompanyTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([teamId, userProfileId])
}

model Category {
  id        String  @id @default(cuid())
  companyId String?
  name      String

  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  courses Course[]

  @@unique([companyId, name])
}

model Course {
  id                       String   @id @default(cuid())
  companyId                String
  createdByProfileId       String
  title                    String
  description              String?
  imageUrl                 String?
  isPublished              Boolean  @default(false)
  isLeaderboardEnabled     Boolean  @default(false)
  estimatedDurationMinutes Int?
  level                    String?
  learningOutcomes         String?
  prerequisites            String?
  categoryId               String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  company         Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy       UserProfile            @relation("CourseCreatedBy", fields: [createdByProfileId], references: [id])
  category        Category?              @relation(fields: [categoryId], references: [id])
  attachments     Attachment[]
  chapters        Chapter[]
  modules         CourseModule[]
  enrollments     CourseEnrollment[]
  teamAssignments CourseTeamAssignment[]
  liveSessions    LiveSession[]
  missions        QuestMission[]
  achievements    CourseAchievement[]
}

model Attachment {
  id        String   @id @default(cuid())
  courseId  String
  chapterId String?
  name      String
  url       String
  type      String?
  scope     AttachmentScope @default(LESSON)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapter Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([chapterId])
}

model Chapter {
  id                       String   @id @default(cuid())
  courseId                 String
  title                    String
  description              String?
  position                 Int      @default(0)
  estimatedDurationMinutes Int?
  videoUrl                 String?
  contentUrl               String?
  isPublished              Boolean  @default(false)
  isPreview                Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    UserProgress[]
  missions    QuestMission[]
  attachments Attachment[]
  lessonBlock LessonBlock?  @relation("LessonBlockChapter")

  @@index([courseId])
}

model CourseEnrollment {
  id            String                 @id @default(cuid())
  courseId      String
  userProfileId String
  assignedById  String
  source        CourseEnrollmentSource @default(MANUAL)
  status        CourseEnrollmentStatus @default(NOT_STARTED)
  dueDate       DateTime?
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt

  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  assignedBy  UserProfile @relation("CourseEnrollmentAssignedBy", fields: [assignedById], references: [id])

  @@unique([courseId, userProfileId])
}

model CourseTeamAssignment {
  id           String   @id @default(cuid())
  courseId     String
  teamId       String
  assignedById String
  assignedAt   DateTime @default(now())

  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  team       CompanyTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
  assignedBy UserProfile @relation("CourseTeamAssignmentAssignedBy", fields: [assignedById], references: [id])

  @@unique([courseId, teamId])
}

model UserProgress {
  id            String    @id @default(cuid())
  userProfileId String
  chapterId     String
  isCompleted   Boolean   @default(false)
  completedAt   DateTime?
  pointsAwarded Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  chapter     Chapter     @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, chapterId])
}

model Badge {
  id           String    @id @default(cuid())
  companyId    String?
  name         String
  description  String?
  icon         String?
  type         BadgeType
  criteria     Json?
  pointsReward Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  company    Company?    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userBadges UserBadge[]
  Quest      Quest[]
}

model UserBadge {
  id            String   @id @default(cuid())
  userProfileId String
  badgeId       String
  awardedById   String?
  awardedAt     DateTime @default(now())
  context       String?

  userProfile UserProfile  @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  badge       Badge        @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  awardedBy   UserProfile? @relation("UserBadgeAwardedBy", fields: [awardedById], references: [id])

  @@unique([userProfileId, badgeId])
}

model UserPoints {
  id            String     @id @default(cuid())
  userProfileId String
  delta         Int
  type          PointsType
  reason        String?
  referenceId   String?
  createdAt     DateTime   @default(now())

  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model Leaderboard {
  id        String            @id @default(cuid())
  companyId String
  scope     LeaderboardScope
  period    LeaderboardPeriod
  startsAt  DateTime
  endsAt    DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  company Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  entries LeaderboardEntry[]
}

model LeaderboardEntry {
  id            String  @id @default(cuid())
  leaderboardId String
  teamId        String?
  userProfileId String?
  rank          Int
  points        Int

  leaderboard Leaderboard  @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  team        CompanyTeam? @relation("LeaderboardEntryTeam", fields: [teamId], references: [id])
  userProfile UserProfile? @relation("LeaderboardEntryUser", fields: [userProfileId], references: [id])
}

model Quest {
  id           String      @id @default(cuid())
  companyId    String
  createdById  String
  title        String
  description  String?
  status       QuestStatus @default(NOT_STARTED)
  pointsReward Int         @default(0)
  badgeId      String?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy   UserProfile       @relation("QuestCreatedBy", fields: [createdById], references: [id])
  badge       Badge?            @relation(fields: [badgeId], references: [id])
  missions    QuestMission[]
  assignments QuestAssignment[]
}

model QuestMission {
  id          String           @id @default(cuid())
  questId     String
  order       Int
  type        QuestMissionType
  courseId    String?
  chapterId   String?
  description String?

  quest   Quest    @relation(fields: [questId], references: [id], onDelete: Cascade)
  course  Course?  @relation(fields: [courseId], references: [id])
  chapter Chapter? @relation(fields: [chapterId], references: [id])

  @@unique([questId, order])
}

model QuestAssignment {
  id            String            @id @default(cuid())
  questId       String
  assigneeType  QuestAssigneeType
  teamId        String?
  userProfileId String?
  assignedById  String
  status        QuestStatus       @default(NOT_STARTED)
  progress      Int               @default(0)
  assignedAt    DateTime          @default(now())
  completedAt   DateTime?

  quest       Quest        @relation(fields: [questId], references: [id], onDelete: Cascade)
  team        CompanyTeam? @relation("QuestAssignmentTeam", fields: [teamId], references: [id])
  userProfile UserProfile? @relation("QuestAssignmentUser", fields: [userProfileId], references: [id])
  assignedBy  UserProfile  @relation("QuestAssignmentAssignedBy", fields: [assignedById], references: [id])
}

model LiveSession {
  id              String   @id @default(cuid())
  companyId       String
  courseId        String
  hostId          String
  title           String
  description     String?
  scheduledFor    DateTime
  durationMinutes Int?
  meetingUrl      String?
  recordingUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  company Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  course  Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  host    UserProfile @relation("LiveSessionHost", fields: [hostId], references: [id])
  blocks  LessonBlock[]
}

// New hierarchical course structure: Course → Module → Lesson → Block
model CourseModule {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?
  position    Int      @default(0)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
  achievements CourseAchievement[]

  @@index([courseId])
}

model Lesson {
  id                       String   @id @default(cuid())
  moduleId                 String
  title                    String
  description              String?
  position                 Int      @default(0)
  estimatedDurationMinutes Int?
  isPublished              Boolean  @default(false)
  isPreview                Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  module  CourseModule        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  blocks  LessonBlock[]
  progress UserLessonProgress[]
  achievements CourseAchievement[]

  @@index([moduleId])
}

model LessonBlock {
  id          String    @id @default(cuid())
  lessonId    String
  type        BlockType
  title       String
  content     String?
  videoUrl    String?
  contentUrl  String?
  position    Int       @default(0)
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  lesson      Lesson                  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  attachments LessonBlockAttachment[]
  legacyChapterId String?  @unique
  legacyChapter   Chapter? @relation("LessonBlockChapter", fields: [legacyChapterId], references: [id], onDelete: SetNull)
  liveSessionId      String?
  liveSession        LiveSession? @relation(fields: [liveSessionId], references: [id], onDelete: SetNull)
  liveSessionConfig  Json?

  quiz Quiz? @relation("BlockQuiz")
  gamification GamificationBlock?

  @@index([lessonId])
}

model GamificationBlock {
  id                    String                  @id @default(cuid())
  lessonBlockId         String                  @unique
  requestedById         String
  contentType           GamificationContentType
  status                GamificationStatus      @default(DRAFT)
  sourceAttachmentIds   String[]                @default([])
  config                Json?
  result                Json?
  openAiRunId           String?
  quizId                String?                 @unique
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  lessonBlock LessonBlock @relation(fields: [lessonBlockId], references: [id], onDelete: Cascade)
  requestedBy UserProfile @relation(fields: [requestedById], references: [id], onDelete: Cascade)
  quiz        Quiz?        @relation("GamificationQuiz", fields: [quizId], references: [id], onDelete: SetNull)
  flashcardDeck FlashcardDeck?

  @@index([requestedById])
}

model Quiz {
  id                 String    @id @default(cuid())
  companyId          String
  createdByProfileId String
  lessonBlockId      String   @unique
  title              String
  description        String?
  passScore          Int       @default(70)
  maxAttempts        Int?
  timeLimitSeconds   Int?
  shuffleQuestions   Boolean   @default(false)
  shuffleOptions     Boolean   @default(false)
  pointsReward       Int       @default(0)
  isPublished        Boolean   @default(false)
  autoGenerated      Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy  UserProfile @relation("QuizCreatedBy", fields: [createdByProfileId], references: [id], onDelete: Cascade)
  lessonBlock LessonBlock @relation("BlockQuiz", fields: [lessonBlockId], references: [id], onDelete: Cascade)
  questions  QuizQuestion[]
  attempts   QuizAttempt[]
  gamification GamificationBlock? @relation("GamificationQuiz")

  @@index([companyId])
  @@index([createdByProfileId])
}

model FlashcardDeck {
  id                  String   @id @default(cuid())
  companyId           String
  createdByProfileId  String
  gamificationBlockId String   @unique
  title               String
  description         String?
  isPublished         Boolean  @default(false)
  autoGenerated       Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  company          Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy        UserProfile    @relation(fields: [createdByProfileId], references: [id], onDelete: Cascade)
  gamificationBlock GamificationBlock @relation(fields: [gamificationBlockId], references: [id], onDelete: Cascade)
  cards            FlashcardCard[]

  @@index([companyId])
  @@index([createdByProfileId])
}

model FlashcardCard {
  id        String   @id @default(cuid())
  deckId    String
  position  Int      @default(0)
  front     String
  back      String
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck FlashcardDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@index([deckId])
  @@unique([deckId, position])
}

model QuizQuestion {
  id          String           @id @default(cuid())
  quizId      String
  position    Int              @default(0)
  type        QuizQuestionType @default(MULTIPLE_CHOICE)
  text        String
  explanation String?
  required    Boolean          @default(false)
  points      Int              @default(1)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  quiz     Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  QuizOption[]
  answers  QuizAnswer[]

  @@index([quizId])
}

model QuizOption {
  id         String   @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean  @default(false)
  points     Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers  QuizAnswerOption[]

  @@index([questionId])
}

model QuizAttempt {
  id             String      @id @default(cuid())
  quizId         String
  userProfileId  String
  attemptNumber  Int         @default(1)
  submittedAt    DateTime?
  score          Int         @default(0)
  passed         Boolean     @default(false)
  durationSeconds Int?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  quiz        Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userProfile UserProfile @relation("QuizAttemptUser", fields: [userProfileId], references: [id], onDelete: Cascade)
  answers     QuizAnswer[]

  @@unique([quizId, userProfileId, attemptNumber])
  @@index([quizId])
  @@index([userProfileId])
}

model QuizAnswer {
  id          String     @id @default(cuid())
  attemptId   String
  questionId  String
  freeText    String?
  isCorrect   Boolean?
  scoreAwarded Int       @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  attempt  QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  options  QuizAnswerOption[]

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@index([questionId])
}

model QuizAnswerOption {
  id        String   @id @default(cuid())
  answerId  String
  optionId  String
  createdAt DateTime @default(now())

  answer QuizAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  option QuizOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([answerId, optionId])
  @@index([optionId])
}

model LessonBlockAttachment {
  id        String   @id @default(cuid())
  blockId   String
  name      String
  url       String
  type      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  block LessonBlock @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@index([blockId])
}

model CourseAchievement {
  id                 String                   @id @default(cuid())
  courseId           String
  title              String
  description        String?
  unlockType         AchievementUnlockType
  targetModuleId     String?
  targetLessonId     String?
  pointsReward       Int                      @default(0)
  icon               String?
  isActive           Boolean                  @default(true)
  createdByProfileId String
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt

  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdBy   UserProfile @relation("CourseAchievementCreatedBy", fields: [createdByProfileId], references: [id], onDelete: Cascade)
  targetModule CourseModule? @relation(fields: [targetModuleId], references: [id])
  targetLesson Lesson?    @relation(fields: [targetLessonId], references: [id])
  awards      UserCourseAchievement[]

  @@index([courseId])
  @@index([targetModuleId])
  @@index([targetLessonId])
}

model UserCourseAchievement {
  id              String    @id @default(cuid())
  userProfileId   String
  achievementId   String
  pointsAwarded   Int       @default(0)
  awardedAt       DateTime  @default(now())

  userProfile UserProfile       @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  achievement CourseAchievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, achievementId])
}

model UserLessonProgress {
  id            String    @id @default(cuid())
  userProfileId String
  lessonId      String
  isCompleted   Boolean   @default(false)
  completedAt   DateTime?
  pointsAwarded Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, lessonId])
}
